--set serveroutput on
declare
v_start constant number :=1;
v_end constant number :=100;
v_sum number :=0;
begin
    for i in v_start..v_end
    loop
        if mod(i, 2) = 1 then v_sum := v_sum + i; end if;
    end loop;
    dbms_output.put_line('Sum: '|| v_sum);
end;

------------------------------------------------

--1*2*3*4* ... * p_num
--fn_factorial(p_num number)
/
declare
function fn_factorial(p_num number) return number
is
v_factorial number:=1;
begin
    for i in 1..p_num
    loop
        v_factorial:=v_factorial * i;
    end loop;
    return v_factorial;
end;

begin
    dbms_output.put_line('Factorial: '||fn_factorial(10));
end;

/
create or replace
function fn_factorial(p_num number) return number
is
v_factorial number:=1;
begin
    if p_num < 0 then return -1; end if;
    if p_num =0 then return 1; end if;
    for i in 1..p_num
    loop
        v_factorial:=v_factorial * i;
    end loop;
    return v_factorial;
end;  --ddl
/

select fn_factorial(-10) as fact from dual;

select employee_id, fn_factorial(employee_id-100) as fact from employees;

--- anonymous
--- procedure
--- function
--- package
set serveroutput on
/
declare --- optional 
    v_lname varchar2(20);
begin ---mondatry
    v_lname := 'King';
    dbms_output.put_line('Begin block');
    dbms_output.put_line('Last name:' || v_lname);
    dbms_output.put_line('End block');
   /* exception --- optional  */
end; ---mondatry
/

declare --- optional 
    v_lname employees.last_name%type;
    v_salary employees.salary%type;
    v_empid employees.employee_id%type :=101;
begin ---mondatry
    dbms_output.put_line('Begin block');
    select last_name, salary into v_lname, v_salary from employees
    where employee_id=v_empid;
    dbms_output.put_line('Last name:' || v_lname);
    dbms_output.put_line('Salary:' || v_salary);
    dbms_output.put_line('End block');

   /* exception --- optional  */
end; ---mondatry
/

declare
    v_out varchar2(10) :='out';
begin
    declare
    v_in varchar2(10);
    begin
        v_in:='in';
        v_out := 'inner-out';
        dbms_output.put_line('inner block - '||v_in);
    end;
    --v_in :='outer-in';
    dbms_output.put_line('outer block - '||v_out);
end;
/
<<outer>>
declare
    a number;
begin
    a:=100;
    declare
    a number;
    begin
        outer.a:=-100;
        dbms_output.put_line('inner block  '||a);
    end;
    dbms_output.put_line('outer block  '||a);
end;

/

declare
v_num number default -10;
begin
    if v_num>0 then dbms_output.put_line('+++');
    else dbms_output.put_line('not +++');
    end if;
end;

/
declare
v_num number default -0;
begin
    if v_num>0 then dbms_output.put_line('+++');
    else dbms_output.put_line('else');
        if v_num=0 then dbms_output.put_line('000');
        else dbms_output.put_line('---');
        end if;
    end if;
end;
/

declare
v_num number default -0;
begin
    if v_num>0 then dbms_output.put_line('+++');
    elsif v_num=0 then dbms_output.put_line('000');
        else dbms_output.put_line('---');
    end if;
end;
/

declare 
v_char char(1) :='b';
begin
    case upper(v_char)   ---statement case
    when 'A' then dbms_output.put_line('I');
    when 'B' then dbms_output.put_line('II');
    else dbms_output.put_line('Other');
    end case;
end;
/

declare 
v_char char(1) :='T';
begin
    case    ---statement case
    when upper(v_char) > 'E' then dbms_output.put_line('None');
    when upper(v_char) between 'A' and 'C' then dbms_output.put_line('I');
    when upper(v_char) = 'D' then dbms_output.put_line('II');
    else dbms_output.put_line('Other');
    end case;
end;
/
-------------------loop

declare
v_loop number :=0;
begin
    loop
        v_loop := v_loop+1;
        dbms_output.put_line(v_loop);
        if v_loop =10 then exit; end if;
    end loop;
end;
/
declare
v_loop number :=0;
begin
    loop
        v_loop := v_loop+1;
        dbms_output.put_line(v_loop);
        exit when v_loop =10;
    end loop;
end;
/
declare
v_loop number :=0;
begin
    while v_loop<10
    loop
        v_loop := v_loop+1;
        dbms_output.put_line(v_loop);
    end loop;
end;
/
begin
    for i in 1..10
    loop
        dbms_output.put_line(i);
    end loop;
end;
/
declare
    i_max constant number :=10;
begin
    for i in 1..i_max
    loop
        CONTINUE WHEN i in (5, 7);
        dbms_output.put_line(i);
    end loop;
end;
/

begin
    for i in 1..5 
    loop
        for j in 1..4 
        loop
            dbms_output.put(i||','||j ||'  ');
        end loop;
        dbms_output.put_line('');
    end loop;
end;

-------------- Homework

c_rowcount = 7
c_colcount = 7

*     *
 *   *
  * *
   *
  * *
 *   *
*     *
------------------
*******
 *****
  ***
   *
  ***
 *****
*******


set serveroutput on
/
declare
type var_students is varray(6) of varchar2(20);
type var_marks is varray(6) of integer(3);
v_students var_students;
v_marks var_marks;
v_count_st integer;
v_count_mr integer;
begin
    v_students := var_students('Nesimi', 'Elshen', 'Nafisat', 'Fidan', 'Sona');
    v_marks := var_marks(78, 89, 95, 100, 100);
    v_students.extend;
    v_students(6):='Zaman';
    v_marks.extend;
    v_marks(6):=99;
    v_count_st := v_students.count;
    v_count_mr := v_marks.count;
    if v_count_st > v_count_mr then v_count_st:=v_count_mr; end if;
    for i in 1..v_count_st
    loop
        DBMS_OUTPUT.PUT_LINE (v_students(i) || ' - ' || v_marks(i));
    end loop;
end;
/
---implicit cursors
begin
update departments set department_name = 'test' where department_id< -50;
DBMS_OUTPUT.PUT_LINE (sql%rowcount||' rows updated.....');
end;
/

---explicit cursors
declare
cursor c_employees is select employee_id, last_name, salary from employees;
rec_employees c_employees%rowtype;
begin
    open c_employees;
    loop
        fetch c_employees into rec_employees;
        exit when c_employees%notfound;
        DBMS_OUTPUT.PUT_LINE (c_employees%rowcount||' rows fetched');
        DBMS_OUTPUT.PUT_LINE (rec_employees.employee_id||' - '||rec_employees.last_name);
    end loop;
    close c_employees;
end;
/
declare
cursor c_employees is select employee_id, last_name, salary from employees;
begin
    for rec_employees in c_employees
    loop
        DBMS_OUTPUT.PUT_LINE (c_employees%rowcount||' rows fetched');
        DBMS_OUTPUT.PUT_LINE (rec_employees.employee_id||' - '||rec_employees.last_name);
    end loop;
end;
/
---procedures
declare
    procedure pr_sum(p_comp1 number, p_comp2 number)  -- by default IN mode
    is
    v_sum number;
    begin
        v_sum:=p_comp1 + p_comp2;
        DBMS_OUTPUT.PUT_LINE ('Procedure executed');
        DBMS_OUTPUT.PUT_LINE ('Sum is '||v_sum);
    end;
begin
    --pr_sum(2, 10);
    pr_sum(p_comp1=>2, p_comp2=>10);
end;
/
declare
    procedure pr_sum(p_comp1 number, p_comp2 number default 100)  -- by default IN mode
    is
    v_sum number;
    begin
        v_sum:=p_comp1 + p_comp2;
        DBMS_OUTPUT.PUT_LINE ('Procedure executed');
        DBMS_OUTPUT.PUT_LINE ('Sum is '||v_sum);
    end;
begin
    pr_sum(p_comp1=>2, p_comp2=>50);
end;
/

declare
v_result number;
    procedure pr_sum(p_comp1 number, p_comp2 number, out_sum out number)  -- by default IN mode
    is
    begin
        out_sum:=p_comp1 + p_comp2;
        DBMS_OUTPUT.PUT_LINE ('Procedure executed');
    end;
begin
    pr_sum(p_comp1=>2, p_comp2=>50, out_sum=>v_result);
    DBMS_OUTPUT.PUT_LINE ('Sum is '||v_result);    
end;
/
create or replace procedure calc_sqr(x in out number)
is
begin
    DBMS_OUTPUT.PUT_LINE ('(1)Value of x is '||x);    
    x:=x*x;
    DBMS_OUTPUT.PUT_LINE ('Stored Procedure executed');
    DBMS_OUTPUT.PUT_LINE ('(2)Value of x is '||x);    
end;
/
declare
    val number :=5;
begin
    calc_sqr(x => val);
    DBMS_OUTPUT.PUT_LINE ('SQR:' ||val);        
end;
/
create or replace function fn_sqr(x number) return number
is
begin
    return x*x;
end;
/
select fn_sqr(5) from dual;
/
select last_name,  fn_sqr(x=>salary) from employees;
/
